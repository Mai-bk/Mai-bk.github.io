<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安卓can开发</title>
      <link href="/2024/08/14/an-zhuo-can-kai-fa-li-cheng/"/>
      <url>/2024/08/14/an-zhuo-can-kai-fa-li-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="Android-CAN-应用开发"><a href="#Android-CAN-应用开发" class="headerlink" title="Android CAN 应用开发"></a>Android CAN 应用开发</h1><p>在工作时发现我们很多客户对于Android can应用开发没有一点头绪，下面我通过一个简单项目来实现一个can通信demo。</p><h2 id="开发准备"><a href="#开发准备" class="headerlink" title="开发准备"></a>开发准备</h2><p><strong>确保开发板硬件上有can节点存在，并且确保通信正常 验证方法如下：</strong></p><h3 id="一-、使用cantool验证"><a href="#一-、使用cantool验证" class="headerlink" title="一 、使用cantool验证"></a>一 、使用cantool验证</h3><h5 id="1-1初始化并设置波特率"><a href="#1-1初始化并设置波特率" class="headerlink" title="1.1初始化并设置波特率"></a>1.1初始化并设置波特率</h5><pre><code class="highlight plaintext">ifconfig can0 downcanconfig can0 bitrate 500000 ctrlmode triple-sampling on //默认使用这个初始化#ip link set can0 type can bitrate 250000 sample-point 0.8 dbitrate 250000 dsample-point 0.75 fd on //有些厂商用的这个初始化ifconfig can0 up</code></pre><h5 id="1-2-发送数据and接收数据"><a href="#1-2-发送数据and接收数据" class="headerlink" title="1.2 发送数据and接收数据"></a>1.2 发送数据and接收数据</h5><pre><code class="highlight plaintext">cansend can0 -e 0x11 0x22 0x33 0x44 0x55 0x66 0x77 0x88candump can0</code></pre><p><strong>确保上面步骤可以正常进行通信</strong></p><h3 id="二、实现Android-的jni方法"><a href="#二、实现Android-的jni方法" class="headerlink" title="二、实现Android 的jni方法"></a>二、实现Android 的jni方法</h3><p>首先新建一个工程 根据自己工程默认即可 语言选择java</p><h5 id="2-1-添加C-模块"><a href="#2-1-添加C-模块" class="headerlink" title="2.1 添加C++模块"></a>2.1 添加C++模块</h5><p>工程创建完毕选择app右键选择 <code>Add C++ to Module</code> 创建路径和文件名称自主修改即可</p><p><img src="/2024/08/14/an-zhuo-can-kai-fa-li-cheng/1723617138938.jpg" alt="图片"></p><p>创建完毕会出现一个cpp文件夹 里面会有一个cmakelists和刚刚创建的文件</p><p><img src="/2024/08/14/an-zhuo-can-kai-fa-li-cheng/1723617188855.jpg" alt="图片"></p><h5 id="2-2-添加java方法"><a href="#2-2-添加java方法" class="headerlink" title="2.2 添加java方法"></a>2.2 添加java方法</h5><p>接下来我们创建两个java类 一个名字为 <code>CanFrame</code> 一个名字为 <code>CanControl</code></p><p><img src="/2024/08/14/an-zhuo-can-kai-fa-li-cheng/1723617253869.jpg" alt="图片"></p><p><strong>CanFrame.java内容为：</strong></p><pre><code class="highlight plaintext">public class CanFrame &#123;    public  int can_id;    public  char can_dlc;    public byte[] data;&#125;</code></pre><p><strong>CanControl.java内容为：</strong>public class CanControl {</p><pre><code class="highlight plaintext">    static &#123;        System.loadLibrary(&quot;myapplication&quot;); //注意这里的库名字为你刚刚创建的C++名称    &#125;    public int fd;    public native static  int OpenCan(String canx);    public native static  int CanWrite(int fd,int canId, byte[] data);    public native static CanFrame CanRead(CanFrame mcanFrame, int time);    public native static  int CloseCan(int fd);&#125;</code></pre><h5 id="2-3-接下来我们来实现CanControl里面的方法"><a href="#2-3-接下来我们来实现CanControl里面的方法" class="headerlink" title="2.3 接下来我们来实现CanControl里面的方法"></a>2.3 接下来我们来实现CanControl里面的方法</h5><p>点击CanControl.java里面的方法 比如   <strong>OpenCan;</strong></p><p> 鼠标移动过去会有一个Create JNl function for CanRead的提示 点击即可 其他的也是一样</p><p><img src="/2024/08/14/an-zhuo-can-kai-fa-li-cheng/1723615609265.jpg" alt="图片"></p><p>都创建完了 我们来到cpp文件 可以看到编译器给我们添加了几个方法</p><p><img src="/2024/08/14/an-zhuo-can-kai-fa-li-cheng/1723617003064.jpg" alt="图片"></p><p>接着我们自己来实现一下 我这里已经实现了 不想写的直接复制粘贴即可</p><pre><code class="highlight plaintext">extern &quot;C&quot;JNIEXPORT jint JNICALLJava_com_example_myapplication_CanControl_OpenCan(JNIEnv *env, jclass clazz, jstring canx) &#123;        int fd;    struct ifreq ifr;    struct sockaddr_can addr;    /* open socket */    if ((fd = socket(PF_CAN, SOCK_RAW, CAN_RAW)) &lt; 0) &#123;        return -1;    &#125;    const char *str = env-&gt;GetStringUTFChars(canx, 0);    strcpy(ifr.ifr_name, str);    ioctl(fd, SIOCGIFINDEX, &amp;ifr);    memset(&amp;addr, 0, sizeof(addr));    addr.can_family = AF_CAN;    addr.can_ifindex = ifr.ifr_ifindex;    if (bind(fd, (struct sockaddr *)&amp;addr, sizeof(addr)) &lt; 0) &#123;        return -2;    &#125;    return fd;&#125;extern &quot;C&quot;JNIEXPORT jint JNICALLJava_com_example_myapplication_CanControl_CanWrite(JNIEnv *env, jclass clazz, jint fd,                                                   jint can_id, jbyteArray data) &#123;    // 获取 JNI 数据    jbyte *pdata = env-&gt;GetByteArrayElements(data, NULL);    jsize data_len = env-&gt;GetArrayLength(data);    // 确保数据长度不超过 CAN 最大数据长度    if (data_len &gt; 8) &#123;        data_len = 8; // CAN 数据长度最大为 8 字节    &#125;    // 创建 CAN 帧    struct can_frame frame;    frame.can_id = can_id;    frame.can_dlc = data_len;    // 将数据复制到 CAN 帧中    for (jsize i = 0; i &lt; data_len; i++) &#123;        frame.data[i] = pdata[i] &amp; 0xFF;    &#125;    // 将剩余的数据部分置为 0（如果数据长度小于 8）    for (jsize i = data_len; i &lt; 8; i++) &#123;        frame.data[i] = 0;    &#125;    // 释放 JNI 数据    env-&gt;ReleaseByteArrayElements(data, pdata, 0);    // 写入 CAN 总线    int ret = write(fd, &amp;frame, sizeof(struct can_frame));    return ret;&#125;extern &quot;C&quot;JNIEXPORT jobject JNICALLJava_com_example_myapplication_CanControl_CanRead(JNIEnv *env, jclass clazz,                                                  jobject mcanFrame, jint time) &#123;    struct can_frame frame;    read(time, &amp;frame, sizeof(struct can_frame));    jclass canFrameClass = env-&gt;GetObjectClass(mcanFrame);    jfieldID canIdField = env-&gt;GetFieldID(canFrameClass, &quot;can_id&quot;, &quot;I&quot;);    jfieldID canDlcField = env-&gt;GetFieldID(canFrameClass, &quot;can_dlc&quot;, &quot;C&quot;);    jfieldID dataField = env-&gt;GetFieldID(canFrameClass, &quot;data&quot;, &quot;[B&quot;);    env-&gt;SetIntField(mcanFrame, canIdField, static_cast&lt;jint&gt;(frame.can_id));    env-&gt;SetCharField(mcanFrame, canDlcField, frame.can_dlc);    jbyteArray dataArray = env-&gt;NewByteArray(frame.can_dlc);    env-&gt;SetByteArrayRegion(dataArray, 0, frame.can_dlc, (jbyte *)frame.data);    env-&gt;SetObjectField(mcanFrame, dataField, dataArray);    return mcanFrame;&#125;extern &quot;C&quot;JNIEXPORT int JNICALLJava_com_example_myapplication_CanControl_CloseCan(JNIEnv *env, jclass clazz, jint fd) &#123;    return close(fd);&#125;</code></pre><h3 id="三、测试demo"><a href="#三、测试demo" class="headerlink" title="三、测试demo"></a>三、测试demo</h3><p>修改MainActivity.java文件</p><pre><code class="highlight plaintext">package com.example.myapplication;import androidx.appcompat.app.AppCompatActivity;import android.os.Bundle;import android.text.method.ScrollingMovementMethod;import android.util.Log;import android.widget.TextView;public class MainActivity extends AppCompatActivity &#123;    CanControl can0;    TextView tv;    @Override    protected void onCreate(Bundle savedInstanceState) &#123;        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        tv = findViewById(R.id.textview0);        tv.setMovementMethod(ScrollingMovementMethod.getInstance());        can0 = new CanControl(this);        can0.InitCan(500000);        can0.fd = can0.OpenCan(&quot;can0&quot;);        //send        new Thread() &#123;            byte[] data = new byte[] &#123;(byte)0xA0, (byte)0xA1, (byte)0xA2, (byte)0xA3, (byte)0xA4, (byte)0xA5, (byte)0xA6, (byte)0xA7&#125;;            @Override            public void run() &#123;                while (true) &#123;                    try &#123;                        sleep(1000); // 每秒发送一次数据                    &#125; catch (InterruptedException e) &#123;                        e.printStackTrace();                    &#125;                    // 更新数据                    data[0] = (byte) ((data[0] + 1) % 0xFF);                    // 调用 CanWrite 方法发送数据                    int result = CanControl.CanWrite(can0.fd,0x123, data);                    if (result &lt; 0) &#123;                        // 发送失败，处理错误                        Log.e(&quot;CAN&quot;, &quot;发送数据失败&quot;);                    &#125; else &#123;                        // 发送成功                        Log.i(&quot;CAN&quot;, &quot;数据发送成功&quot;);                    &#125;                &#125;            &#125;        &#125;.start();        // Initialize CanFrame        final CanFrame[] canFrame = &#123;new CanFrame()&#125;;        //receive        new Thread() &#123;            @Override            public void run() &#123;                while (true) &#123;                    // Call the CanRead method                    canFrame[0] = CanControl.CanRead(canFrame[0], can0.fd);                    // Extract data from CanFrame                    int can0id = canFrame[0].can_id;                    int can0eff = (can0id &amp; 0x80000000) != 0 ? 1 : 0; // Extended frame                    int can0rtr = (can0id &amp; 0x40000000) != 0 ? 1 : 0; // Remote transmission request                    int can0len = canFrame[0].can_dlc;                    byte[] can0data = canFrame[0].data;                    runOnUiThread(() -&gt; &#123;                        // Prepare the string to display                        String str = &quot;can0  RX &quot;;                        str += (can0eff == 0) ? &quot;S &quot; : &quot;E &quot;;                        str += (can0rtr == 0) ? &quot;-  &quot; : &quot;R  &quot;;                        String strid = Integer.toHexString(can0id &amp; 0x1FFFFFFF); // Mask to get ID                        if (can0eff == 0) &#123;                            for (int i = 0; i &lt; 3 - strid.length(); i++) &#123;                                strid = &#x27;0&#x27; + strid;                            &#125;                        &#125; else &#123;                            for (int i = 0; i &lt; 8 - strid.length(); i++) &#123;                                strid = &#x27;0&#x27; + strid;                            &#125;                        &#125;                        str = str + strid + &quot;   [&quot; + can0len + &quot;]  &quot;;                        for (int i = 0; i &lt; can0len; i++) &#123;                            String hex = Integer.toHexString(can0data[i] &amp; 0xFF);                            hex = (hex.length() == 1) ? (&#x27;0&#x27; + hex) : hex;                            str = str + &#x27; &#x27; + hex;                        &#125;                        str = str.toUpperCase();                        str += &#x27;\n&#x27;;                        // Update the TextView                        if (tv.getLineCount() &gt; 1000) &#123;                            tv.setText(&quot;&quot;);                        &#125;                        tv.append(str);                        int offset = tv.getLineCount() * tv.getLineHeight();                        if (offset &gt; tv.getHeight()) &#123;                            tv.scrollTo(0, offset - tv.getHeight());                        &#125;                    &#125;);                &#125;            &#125;        &#125;.start();    &#125;&#125;</code></pre><p>修改activity_main.xml文件</p><pre><code class="highlight plaintext">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;androidx.constraintlayout.widget.ConstraintLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;    xmlns:tools=&quot;http://schemas.android.com/tools&quot;    android:id=&quot;@+id/main&quot;    android:layout_width=&quot;match_parent&quot;    android:layout_height=&quot;match_parent&quot;    tools:context=&quot;.MainActivity&quot;&gt;    &lt;TextView        android:id=&quot;@+id/textview0&quot;        android:layout_width=&quot;wrap_content&quot;        android:layout_height=&quot;wrap_content&quot;        android:text=&quot;&quot;        app:layout_constraintBottom_toBottomOf=&quot;parent&quot;        app:layout_constraintEnd_toEndOf=&quot;parent&quot;        app:layout_constraintStart_toStartOf=&quot;parent&quot;        app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;&lt;/androidx.constraintlayout.widget.ConstraintLayout&gt;</code></pre><hr><h3 id="四、验证"><a href="#四、验证" class="headerlink" title="四、验证"></a>四、验证</h3><p><img src="/2024/08/14/an-zhuo-can-kai-fa-li-cheng/1723534231566.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QT环境配置</title>
      <link href="/2024/08/01/1/"/>
      <url>/2024/08/01/1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载QT源码"><a href="#一、下载QT源码" class="headerlink" title="一、下载QT源码"></a>一、下载QT源码</h2><p>QT各源码下载地址：<a href="http://download.qt.io/archive/qt/">http://download.qt.io/archive/qt/</a> (我这里下载的QT5.12.5)</p><h2 id="二、编译源码"><a href="#二、编译源码" class="headerlink" title="二、编译源码"></a>二、编译源码</h2><p><strong>打开虚拟机解压qt源码并进入qt目录</strong></p><p>tar -xvJf qt-everywhere-src-5.12.5.tar.xz<br>cd qt-everywhere-src-5.12.5</p><p><strong>配置编译模块 我这边是写成了一个脚本a.sh 内容如下：</strong></p><pre><code class="highlight plaintext">QT_INSTALL_DIR=/opt/tool/arm-linux-gcc5.31/CROSS_COMPILE=/opt/tool/arm-linux-gcc5.31/bin/arm-linux-gnueabi-gccSYSROOT_DIR=/opt/tool/arm-linux-gcc5.31/sysroot./configure \    -opensource \    -confirm-license \    -extprefix $QT_INSTALL_DIR \    -sysroot $SYSROOT_DIR \    -xplatform linux-arm-gnueabi-g++ \    -device-option CROSS_COMPILE=$CROSS_COMPILE \    -R /usr/lib \    -no-strip \    -c++std c++11 \    -shared \    -nomake examples \    -accessibility \    -no-sql-db2 \    -no-sql-ibase \    -no-sql-mysql \    -no-sql-oci \    -no-sql-odbc \    -no-sql-psql \    -no-sql-sqlite2 \    -no-sql-tds \    -no-sql-sqlite \    -plugin-sql-sqlite \    -no-sse2 \    -no-sse3 \    -no-ssse3 \    -no-sse4.1 \    -no-sse4.2 \    -no-avx \    -no-avx2 \    -no-mips_dsp \    -no-mips_dspr2 \    -qt-zlib \    -no-journald \    -qt-libpng \    -qt-libjpeg \    -qt-freetype \    -qt-harfbuzz \    -no-openssl \    -no-xcb-xlib \    -no-glib \    -no-pulseaudio \    -alsa \    -gui \    -widgets \    -v \    -optimized-qmake \    -no-cups \    -no-iconv \    -evdev \    -no-icu \    -no-fontconfig \    -no-strip \    -pch \    -dbus \    -no-use-gold-linker \    -no-directfb \    -no-eglfs \    -linuxfb \    -no-kms \    -no-opengl \    -no-vulkan \    -no-system-proxies \    -no-slog2 \    -no-pps \    -no-imf \    -no-lgmon \    -tslib \    -skip qt3d \    -skip qtwebengine \    -skip qtwebview \    -skip qtx11extras \    -nomake tests \    -nomake tools</code></pre><p><strong>这里的QT_INSTALL_DIR是安装目录  CROSS_COMPILE是指定编译器 SYSROOT_DIR是开发板文件系统的sysroot（这里我把安装目录跟交叉编译器放在一个路径）</strong></p><p><strong>这里跳过了    -skip qt3d \    -skip qtwebengine \      -skip qtwebview \    -skip qtx11extras \这几个模块 需要的话删除即可</strong></p><p><strong>给脚本权限并执行脚本</strong></p><pre><code class="highlight plaintext">chmod 777 a.sh &amp;&amp; ./a.sh</code></pre><p><strong>配置完毕执行 等待系统编译完 编译速度取决于电脑配置</strong></p><pre><code class="highlight plaintext">make -j16 &amp;&amp; sudo make install</code></pre><hr><p>**编译完成后可以看到安装路径下多出来了qt的库  **</p><p><strong>执行一下</strong></p><pre><code class="highlight plaintext">qmake -v</code></pre><p><strong>现在我们就构建成功了qt5.12.5+交叉编译器了</strong></p><h2 id="三、把QT环境移植到arm开发板"><a href="#三、把QT环境移植到arm开发板" class="headerlink" title="三、把QT环境移植到arm开发板"></a>三、把QT环境移植到arm开发板</h2><p><strong>由于我这边是分开构建的 你们可以再configure的时候不要跟交叉编译器放在一个目录 另外指定个Qt_5.12目录</strong></p><p><strong>编译完成后就会的到Qt_5.12.5的库了</strong></p><p>接着我们把Qt_5.12.5目录拷贝在开发板上面 我这边放在了&#x2F;usr&#x2F;local&#x2F;目录下</p><p>然后用个脚本qt_env.sh配置环境变量 内容如下</p><pre><code class="highlight plaintext">export  QTDIR=/usr/local/Qt_5.12.5if [ -d $QTDIR ];then        export  QT_ROOT=$QTDIR        export  PATH=$QTDIR/bin:$PATH        export  LD_LIBRARY_PATH=$QTDIR/lib:/usr/lib/cedarx/:$LD_LIBRARY_PATH        export QT_QPA_PLATFORM_PLUGIN_PATH=$QT_ROOT/plugins        export QT_QPA_PLATFORM=linuxfb:tty=/dev/fb0        export QT_QPA_FONTDIR=$QT_ROOT/fonts        export QML2_IMPORT_PATH=/usr/local/Qt_5.12.5/qml        export QML2_PACKAGE_PATH=/usr/local/Qt_5.12.5/qml        export QT_QPA_PLATFORM=linuxfb        #export QT_QPA_EGLFS_INTEGRATION=eglfs_mali        #export QT_QPA_FB_HIDECURSOR=1        #export QT_QPA_EGLFS_HIDECURSOR=1        #export QT_QPA_EGLFS_ROTATION=90        export QWS_MOUSE_PROTO=        #export DBUS_SESSION_BUS_ADDRESS=`cat /tmp/dbusaddr`        mkdir -p /dev/shm        ulimit -c unlimited        echo &quot;find qt5 installed done&quot;fi</code></pre><p>设置一下环境变量</p><pre><code class="highlight plaintext">source /qt_env.sh</code></pre><p>再运行程序即可</p>]]></content>
      
      
      <categories>
          
          <category> Mai </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ARM开发板 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决ubuntu20以上无法拖拽复制粘贴</title>
      <link href="/2024/08/01/2/"/>
      <url>/2024/08/01/2/</url>
      
        <content type="html"><![CDATA[<p>首先安装<a href="https://so.csdn.net/so/search?q=VMware&spm=1001.2101.3001.7020">VMware</a> Tools：</p><pre><code class="highlight plaintext">sudo apt install open-vm-toolssudo apt install open-vm-tools-devsudo apt install open-vm-tools-desktop</code></pre><p>新版ubuntu默认启用了窗口系统Wayland不是原来的x11所以需要禁用Wayland</p><pre><code class="highlight plaintext">sudo vim /etc/gdm3/custom.conf</code></pre><p>找到 <code>#WaylandEnable=false</code>删除前面的#号保存退出重启即可</p>]]></content>
      
      
      <categories>
          
          <category> Mai </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决ubuntu的网络问题</title>
      <link href="/2024/08/01/3/"/>
      <url>/2024/08/01/3/</url>
      
        <content type="html"><![CDATA[<h1 id="网络修复指南"><a href="#网络修复指南" class="headerlink" title="网络修复指南"></a>网络修复指南</h1><p>该方法可以解决99%的网络问题！！！！</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p><strong>禁用 NetworkManager 服务</strong>：<br>首先，我们禁用 NetworkManager 服务以防止它自动管理网络连接。</p><pre><code class="highlight bash"><span class="built_in">sudo</span> systemctl <span class="built_in">disable</span> NetworkManager</code></pre></li><li><p><strong>停止 NetworkManager 服务</strong>： 然后，我们停止 NetworkManager 服务。</p><pre><code class="highlight plaintext">sudo systemctl stop NetworkManager.service</code></pre></li><li><p><strong>重启 network 服务</strong> ：<br>接下来，我们重启 network 服务来重新配置网络接口。</p><pre><code class="highlight plaintext">sudo systemctl restart network</code></pre></li><li><p><strong>停止 network 服务</strong>： 我们也可以选择停止 network 服务，以防止冲突。</p><pre><code class="highlight plaintext">sudo systemctl stop network</code></pre></li><li><p><strong>禁用 network 服务</strong>： 禁用 network 服务，确保它不会在启动时自动运行。</p><pre><code class="highlight plaintext">sudo systemctl disable network</code></pre></li><li><p><strong>启用 NetworkManager 服务</strong>： 重新启用 NetworkManager 服务，使其可以管理网络连接。</p><pre><code class="highlight plaintext">sudo systemctl enable NetworkManager.service</code></pre></li><li><p><strong>启动 NetworkManager 服务</strong>： 启动 NetworkManager 服务。</p><pre><code class="highlight plaintext">sudo systemctl start NetworkManager.service</code></pre></li><li><p><strong>开启网络连接</strong>： 使用 nmcli 命令开启网络连接</p><pre><code class="highlight plaintext">nmcli networking on</code></pre></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上步骤，我们可以有效地解决大多数网络连接问题。这些步骤包括管理和切换不同的网络服务，以确保网络配置正确应用。如果仍然遇到问题，可以进一步检查网络配置文件和硬件连接。</p>]]></content>
      
      
      <categories>
          
          <category> Mai </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
